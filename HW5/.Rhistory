linMap <- function(x, low, high) {
return((x - min(x)) / max(x - min(x)) * (high - low) + low)
}
for (j in 1:5) {
jthcluster = compress.train.images[which(gamma.new==j),]
variance = apply(jthcluster, 2, var)
pixels = linMap(variance,0,255)
pixels = 255- pixels
show_digitsmall(pixels)
}
# ---- table 1 ----
table = matrix(0,5,5)
for (i in 1:5) {
ithcluster = which(gamma.new==i)
for (j in 0:4) {
count = 0
for (k in 1:length(ithcluster)) {
if (train.labels[ithcluster[k]] == j)
count = count + 1
}
table[i,j+1] = count
}
}
table.error = matrix(0, 5,1)
table.max = matrix(0, 5,1)
for(i in 1:5){
max = 0
for(j in 1:5){
if(table[i,j] > max){
max = table[i,j]
}
}
table.max[i] = max
}
for(i in 1:5){
for(j in 1:5){
if(table[i,j] != table.max[i]){
table.error[i] = table.error[i] +  table[i,j]
}
}
}
temp.id = matrix(1,5,1)
temp.denom = table %*% temp.id
for(i in 1:5){
table.error[i] = table.error[i] / temp.denom[i]
}
print(table)
print(table.error)
}
do.plotting(best.mu, best.gamma)
do.plotting(best_mu, best_gamma)
print(table)
print(table.error)
table <- matrix(0,5,5)
for (i in 1:5) {
ithcluster <- which(best_gamma == i)
for (j in 0:4) {
count <- 0
for (k in 1:length(ithcluster)) {
if (train.labels[ithcluster[k]] == j)
count = count + 1
}
table[i,j+1] = count
}
}
error <- rep(0, 5)
for (i in 1:5) {
error[i] <- 1 - max(table[i,]) / sum(table[i,])
}
print(table)
paste("Digit 1 error rate:", error[which(indices == 1)])
paste("Digit 2 error rate:", error[which(indices == 2)])
paste("Digit 3 error rate:", error[which(indices == 3)])
paste("Digit 4 error rate:", error[which(indices == 4)])
paste("Digit 5 error rate:", error[which(indices == 5)])
print(table.error)
do.plotting <- function(mu.min, gamma.new){
# ---- plot b ----
for (j in 1:5) {
show_digitsmall(mu.min[j,])
}
# ---- plot c ----
linMap <- function(x, low, high) {
return((x - min(x)) / max(x - min(x)) * (high - low) + low)
}
for (j in 1:5) {
jthcluster = compress.train.images[which(gamma.new==j),]
variance = apply(jthcluster, 2, var)
pixels = linMap(variance,0,255)
pixels = 255- pixels
show_digitsmall(pixels)
}
# ---- table 1 ----
table = matrix(0,5,5)
for (i in 1:5) {
ithcluster = which(gamma.new==i)
for (j in 0:4) {
count = 0
for (k in 1:length(ithcluster)) {
if (train.labels[ithcluster[k]] == j)
count = count + 1
}
table[i,j+1] = count
}
}
table.error = matrix(0, 5,1)
table.max = matrix(0, 5,1)
for(i in 1:5){
max = 0
for(j in 1:5){
if(table[i,j] > max){
max = table[i,j]
}
}
table.max[i] = max
}
for(i in 1:5){
for(j in 1:5){
if(table[i,j] != table.max[i]){
table.error[i] = table.error[i] +  table[i,j]
}
}
}
temp.id = matrix(1,5,1)
temp.denom = table %*% temp.id
for(i in 1:5){
table.error[i] = table.error[i] / temp.denom[i]
}
print(table)
print(table.error)
}
do.plotting(best_mu, best_gamma)
6119 / (1001 + 6119 + 644 + 2566 + 2390)
paste("Digit 1 error rate:", error[which(indices == 1)])
paste("Digit 2 error rate:", error[which(indices == 2)])
paste("Digit 3 error rate:", error[which(indices == 3)])
paste("Digit 4 error rate:", error[which(indices == 4)])
paste("Digit 5 error rate:", error[which(indices == 5)])
6119 / (1001 + 6119 + 644 + 2566 + 2390)
table.error
table
sum(table[,1])
3520/5923
6119/sum(table[1,])
6119/sum(table[,1])
6119 / (1001 + 644 + 2566 + 2390)
table.error = matrix(0, 5,1)
table.max = matrix(0, 5,1)
for(i in 1:5){
max = 0
for(j in 1:5){
if(table[i,j] > max){
max = table[i,j]
}
}
table.max[i] = max
}
for(i in 1:5){
for(j in 1:5){
if(table[i,j] != table.max[i]){
table.error[i] = table.error[i] +  table[i,j]
}
}
}
temp.id = matrix(1,5,1)
temp.denom = table %*% temp.id
for(i in 1:5){
table.error[i] = table.error[i] / temp.denom[i]
}
table.error
table
table = matrix(0,5,5)
for (i in 1:5) {
ithcluster = which(best_gamma==i)
for (j in 0:4) {
count = 0
for (k in 1:length(ithcluster)) {
if (train.labels[ithcluster[k]] == j)
count = count + 1
}
table[i,j+1] = count
}
}
table.error = matrix(0, 5,1)
table.max = matrix(0, 5,1)
for(i in 1:5){
max = 0
for(j in 1:5){
if(table[i,j] > max){
max = table[i,j]
}
}
table.max[i] = max
}
for(i in 1:5){
for(j in 1:5){
if(table[i,j] != table.max[i]){
table.error[i] = table.error[i] +  table[i,j]
}
}
}
temp.id = matrix(1,5,1)
temp.denom = table %*% temp.id
for(i in 1:5){
table.error[i] = table.error[i] / temp.denom[i]
}
print(table)
print(table.error)
best_gamma
best_mu
nrow(best_mu)
which(best_gamma = 1)[1]
which(best_gamma == 1)[1]
train.labels(which(best_gamma == 1)[1])
train.labels[which(best_gamma == 1)[1]]
train.labels[which(best_gamma == 2)[1]]
train.labels[which(best_gamma == 3)[1]]
train.labels[which(best_gamma == 4)[1]]
train.labels[which(best_gamma == 5)[1]]
table
train.labels(which(best_gamma == 1)[2])
train.labels[which(best_gamma == 1)[2]]
train.labels[which(best_gamma == 1)[3]]
train.labels[which(best_gamma == 1)[4]]
train.labels[which(best_gamma == 1)[5]]
train.labels[which(best_gamma == 1)[6]]
length(which(train.labels[which(best_gamma == 1)] == 1))
table
table.error
max(table)
table.max
temp.id
temp.denom
sum(table[1,])
sum(table[1,])
table.error[1]
table.error
table.max
6119/sum(table[1,])
1-0.481035
table <- matrix(0,5,5)
for (i in 1:5) {
ithcluster <- which(best_gamma == i)
for (j in 0:4) {
count <- 0
for (k in 1:length(ithcluster)) {
if (train.labels[ithcluster[k]] == j)
count = count + 1
}
table[i,j+1] = count
}
}
error <- rep(0, 5)
for (i in 1:5) {
error[i] <- 1 - max(table[i,]) / sum(table[i,])
}
print(table)
paste("Cluster 1 represents digit", which.max(table[1,]))
paste("Cluster 2 represents digit", which.max(table[2,]))
paste("Cluster 3 represents digit", which.max(table[3,]))
paste("Cluster 4 represents digit", which.max(table[4,]))
paste("Cluster 5 represents digit", which.max(table[5,]))
indices <- c(which.max(table[1,]), which.max(table[2,]), which.max(table[3,]), which.max(table[4,]), which.max(table[5,]))
print(error)
paste("Digit 1 error rate:", error[which(indices == 1)])
paste("Digit 2 error rate:", error[which(indices == 2)])
paste("Digit 3 error rate:", error[which(indices == 3)])
paste("Digit 4 error rate:", error[which(indices == 4)])
paste("Digit 5 error rate:", error[which(indices == 5)])
max(table[1,])
sum(table[1,])
error
table.error
$\gamma_{ij} = \frac{p_\theta(x_i|z_i = j)p(z_i = j)}{\sum\limits_{l=1}^{k}p_\theta(x_i|z_i = l)p(z_i = l)} = \frac{\eta_j exp(-\frac{1}{2\sigma^2}||x_i-\mu_j||_2^2)}{\sum\limits_{l=1}^{k}\eta_l exp(-\frac{1}{2\sigma^2}||x_i-\mu_l||_2^2)}$
load("compress.train.images.RData")
#Helper log-sum function
log.sum <- function(v) {
log.sum.pair <- function(x,y){
if ((y == -Inf) && (x == -Inf)){
return(-Inf);
}
if (y < x) return(x+log1p(exp(y-x)))
else return(y+log1p(exp(x-y)));
}
r <- v[1];
for (i in 2:length(v))
r <- log.sum.pair(r, v[i]);
return(r);
}
#Calculate Gamma and likelihood
calc.gamma <- function(mat.images){
tmpvalues = rep(NA,num.class)
for(j in 1:num.class){
tmpSigmaSquare = as.numeric(sigma[[j]][1,1])
tmpvalues[j] = log(eta[j]) - (14*14)/2*log(2*pi) - .5*14*14*log(tmpSigmaSquare)
}
calc.gamma_indiv <- function(i){
tmpvec = rep(NA,num.class)
for(j in 1:num.class){
tmpSigmaSquare = as.numeric(sigma[[j]][1,1])
tmpvecdiff = mat.images[i,]-mu[j,]
tmpvec[j] = tmpvalues[j] - .5*(1/tmpSigmaSquare)*tmpvecdiff%*%tmpvecdiff
}
return(tmpvec)
}
tmpmat.log = t(sapply(1:dim(mat.images)[1],calc.gamma_indiv))
tmpvec.logsum = apply(tmpmat.log,1,log.sum)
for(j in 1:num.class){
tmpmat.log[,j] = tmpmat.log[,j] - tmpvec.logsum
}
tmpmat.log = exp(tmpmat.log)
return(list(gamma = tmpmat.log, obj=sum(tmpvec.logsum)))
}
#Calculate Sigma
calc.Sigma <- function(j,mat.images){
sigma.squared = 0.5
for(i in 1:dim(mat.images)[1]){
sigma.squared = sigma.squared + gamma[i,j]*t(mat.images[i,]-mu[j,])%*%(mat.images[i,]-mu[j,])
}
sigma.squared = sigma.squared/(14*14*sum(gamma[,j]))
tmpmat = as.numeric(sigma.squared) * diag(14*14)
return(tmpmat)
}
#EM-Algorithm Spherical: modified from blog post
#initialize the parameters
num.class = 5
inputX = compress.train.images
mu = inputX[sample(0:nrow(inputX), 5),]
eta = rep(1/num.class,num.class)
mu = inputX[sample(0:nrow(inputX), 5),]
sigma = list(0)
for(j in 1:num.class){
sigma[[j]] = 2*diag(14*14)
}
gamma = matrix(0,ncol=num.class,nrow=nrow(inputX))
num.EPS = 0.0001
num.iter = 1
num.MAXITER = 100
vec.obj = rep(NA,num.MAXITER)
while(TRUE){
#E-step. calculate the gammas
#calculate the loglikelihood while we calculate the gammas
eres = calc.gamma(inputX)
vec.obj[num.iter] = eres$obj
gamma = eres$gamma
if(num.iter > 1 && abs((vec.obj[num.iter]-vec.obj[num.iter-1])/vec.obj[num.iter-1]) < num.EPS) break()
cat("Step:", num.iter, "\n")
cat("Log-Likelihood:", vec.obj[num.iter], " | ")
cat("Fractional error:", (vec.obj[num.iter]-vec.obj[num.iter-1])/vec.obj[num.iter-1], "\n")
#M-step. calculate the parameters
for(j in 1:num.class){
eta[j] = 1/nrow(inputX)*sum(gamma[,j])
mu[j,] = t(gamma[,j]%*%inputX)/sum(gamma[,j])
sigma[[j]] = calc.Sigma(j,inputX)
cat("Sigma:", sigma[[j]][1,1])
}
num.iter = num.iter+1
if(num.iter > num.MAXITER) break()
plotTable(12, getLabel(gamma), compress.train.images)
}
mu.min = mu
gamma.new = getLabel(gamma)
do.plotting(mu.min, gamma.new)
load("compress.train.images.RData")
log.sum <- function(v) {
log.sum.pair <- function(x,y){
if ((y == -Inf) && (x == -Inf)){
return(-Inf);
}
if (y < x) return(x+log1p(exp(y-x)))
else return(y+log1p(exp(x-y)));
}
r <- v[1];
for (i in 2:length(v))
r <- log.sum.pair(r, v[i]);
return(r);
}
calc.gamma <- function(mat.images) {
tmpvalues = rep(NA,k)
for(j in 1:k){
tmpsigsquare = as.numeric(sigma[[j]][1,1])
tmpvalues[j] = log(eta[j]) - (14*14)/2*log(2*pi) - .5*14*14*log(tmpsigsquare)
}
calc.gamma_indiv <- function(i){
tmpvec = rep(NA,k)
for(j in 1:k){
tmpsigsquare = as.numeric(sigma[[j]][1,1])
tmpvecdiff = mat.images[i,]-mu[j,]
tmpvec[j] = tmpvalues[j] - .5*(1/tmpsigsquare)*tmpvecdiff%*%tmpvecdiff
}
return(tmpvec)
}
tmpmat.log = t(sapply(1:nrow(mat.images),calc.gamma_indiv))
tmpvec.logsum = apply(tmpmat.log,1,log.sum)
for(j in 1:k){
tmpmat.log[,j] = tmpmat.log[,j] - tmpvec.logsum
}
tmpmat.log = exp(tmpmat.log)
return(list(gamma = tmpmat.log, obj=sum(tmpvec.logsum)))
}
calc.Sigma <- function(j, mat.images) {
# add pertubation to diagonal
sigma.squared <- 0.5
for (i in 1:nrow(mat.images)) {
sigma.squared <- sigma.squared + gamma[i,j] * t(mat.images[i,]-mu[j,])%*%(mat.images[i,]-mu[j,])
}
sigma.squared = sigma.squared/(14*14*sum(gamma[,j]))
tmpmat = as.numeric(sigma.squared) * diag(14*14)
return(tmpmat)
}
getLabel <- function(gamma){
label = rep(0, nrow(gamma))
for(i in 1:nrow(gamma)){
maxVal = gamma[i,1]
maxIndex = 1
for(j in 1:ncol(gamma)){
if(gamma[i,j] > maxVal){
maxVal = gamma[i,j]
maxIndex = j
}
}
label[i] = maxIndex
}
return (label)
}
k <- 5
best_mu <- NULL
best_gamma <- NULL
min_obj <- Inf
for (i in 1:3) {
# initialize parameters
mu <- compress.train.images[sample(0:nrow(compress.train.images), 5),]
eta <- rep(1/k, k)
sigma <- list(0)
for(j in 1:k){
sigma[[j]] = 2*diag(14*14)
}
gamma <- matrix(0, ncol = k, nrow = nrow(compress.train.images))
num.EPS = 0.0001
num.iter = 1
num.MAXITER = 100
vec.obj = rep(NA,num.MAXITER)
while(TRUE) {
# E-step: calculate gammas
eres = calc.gamma(compress.train.images)
vec.obj[num.iter] = eres$obj
gamma = eres$gamma
if(num.iter > 1 && abs((vec.obj[num.iter]-vec.obj[num.iter-1])/vec.obj[num.iter-1]) < num.EPS) break()
# M-step: updating the parameters
for (j in 1:k) {
eta[j] = 1/nrow(compress.train.images)*sum(gamma[,j])
mu[j,] = t(gamma[,j]%*%compress.train.images)/sum(gamma[,j])
sigma[[j]] = calc.Sigma(j,compress.train.images)
}
num.iter = num.iter+1
if(num.iter > num.MAXITER) break()
}
if (vec.obj[num.iter] < min_obj) {
best_mu = mu
best_gamma = getLabel(gamma)
min_obj <- vec.obj[num.iter]
}
}
plotTable(12, best_gamma, compress.train.images)
# Plot 2
par(mfrow=c(1,5))
for (i in 1:5) {
show_digitsmall(best_mu[i,])
}
# Plot 3
for (i in 1:5) {
curr_cluster <- compress.train.images[which(best_gamma == i),]
var_mat <- apply(curr_cluster, 2, var)
var_mat <- rescale(var_mat, c(0, 255))
show_digitsmall(255 - var_mat)
}
# Table 1
table <- matrix(0,5,5)
for (i in 1:5) {
ithcluster <- which(best_gamma == i)
for (j in 0:4) {
count <- 0
for (k in 1:length(ithcluster)) {
if (train.labels[ithcluster[k]] == j)
count = count + 1
}
table[i,j+1] = count
}
}
error <- rep(0, 5)
for (i in 1:5) {
error[i] <- 1 - max(table[i,]) / sum(table[i,])
}
print(table)
paste("Cluster 1 represents digit", which.max(table[1,])-1)
paste("Cluster 2 represents digit", which.max(table[2,])-1)
paste("Cluster 3 represents digit", which.max(table[3,])-1)
paste("Cluster 4 represents digit", which.max(table[4,])-1)
paste("Cluster 5 represents digit", which.max(table[5,])-1)
indices <- c(which.max(table[1,]), which.max(table[2,]), which.max(table[3,]), which.max(table[4,]), which.max(table[5,]))
print(error)
paste("Digit 1 error rate:", error[which(indices == 1)])
paste("Digit 2 error rate:", error[which(indices == 2)])
paste("Digit 3 error rate:", error[which(indices == 3)])
paste("Digit 4 error rate:", error[which(indices == 4)])
paste("Digit 5 error rate:", error[which(indices == 5)])
vec.obj[num.iter]
max_obj <- -Inf
max-obj
max)obj
max_obj
dim(compress.train.images)
