head(sapply(dataTrainAll$Click, function(x) {
if (x > 1) {
return(1)
} else {
return(0)
}
}))
head(dataTrainAll$City)
head(dataTrainAll$Click)
which(dataTrainAll$Click >= 1)[1]
sapply(dataTrainAll$Click, function(x) {
if (x >= 1) {
return(1)
} else {
return(0)
}
})
sapply(dataTrainAll$Click, function(x) {
if (x >= 1) {
return(1)
} else {
return(0)
}
})[15]
which(dataTrainAll$Click >= 1)[2]
sapply(dataTrainAll$Click, function(x) {
if (x >= 1) {
return(1)
} else {
return(0)
}
})[37]
training_data <- cbind(training_data, Click = sapply(dataTrainAll$Click, function(x) {
if (x >= 1) {
return(1)
} else {
return(0)
}
}))
head(training_data)
length(which(training_data$Click == 1))
length(which(dataTrainAll$Click >= 1))
?glmnet
dim(training_data)
dim(training_data[, -"Click"])
dim(training_data[, -c("Click")])
head(training_data[, 1:dim(training_data)[2] - 1])
head(training_data[, 1:dim(training_data)[2]])
load("iPinYou.RData") # loads dataTest, dataTestRes and dataTrainAll objects
dataTrainAll$Region <- factor(dataTrainAll$Region)
dataTrainAll$City <- factor(dataTrainAll$City)
dataTrainAll$AdX <- factor(dataTrainAll$AdX)
dataTrainAll$Domain <- factor(dataTrainAll$Domain)
dataTrainAll$Key_Page <- factor(dataTrainAll$Key_Page)
dataTrainAll$Ad_Vis <- factor(dataTrainAll$Ad_Vis)
dataTrainAll$Ad_Form <- factor(dataTrainAll$Ad_Form)
# Converting to indicator variables
# Implicit category for Region is 1
training_data <- model.matrix(~Region, data = dataTrainAll)[, -1]
# Implicit category for City is 1
training_data <- cbind(training_data, model.matrix(~City, data = dataTrainAll)[, -1])
# Implicit category for AdX is 1
training_data <- cbind(training_data, model.matrix(~AdX, data = dataTrainAll)[, -1])
# Implicit category for Domain is 5Fa-expoBTTR1m58uG
training_data <- cbind(training_data, model.matrix(~Domain, data = dataTrainAll)[, -1])
# Implicit category for Key_page is 3a7eb50444df6f61b2409f4e2f16b687
training_data <- cbind(training_data, model.matrix(~Key_Page, data = dataTrainAll)[, -1])
# Implicit category for Ad_Vis is 0
training_data <- cbind(training_data, model.matrix(~Ad_Vis, data = dataTrainAll)[, -1])
# Implicit category for Ad_Form is 0
training_data <- cbind(training_data, model.matrix(~Ad_Form, data = dataTrainAll)[, -1, drop=FALSE])
# Standardize remaining three columns
training_data <- cbind(training_data, Ad_Width = dataTrainAll$Ad_Width)
training_data <- cbind(training_data, Ad_Height = dataTrainAll$Ad_Height)
training_data <- cbind(training_data, Floor_Price = dataTrainAll$Floor_Price)
training_data$Ad_Width <- (training_data$Ad_Width - mean(training_data$Ad_Width)) / sd(training_data$Ad_Width)
training_data <- data.frame(model.matrix(~Region, data = dataTrainAll)[, -1])
head(training_data)
typeof(training_data)
training_data <- as.data.frame(model.matrix(~Region, data = dataTrainAll)[, -1])
typeof(training_data)
typeof(unlist(training_data))
names(training_data)
typeof(model.matrix(~Region, data = dataTrainAll)[, -1])
head(model.matrix(~Region, data = dataTrainAll)[, -1])
dim(model.matrix(~Region, data = dataTrainAll)[, -1])
typeof(dataTrainAll)
training_data <- data.frame(model.matrix(~Region, data = dataTrainAll)[, -1])
# Implicit category for City is 1
training_data <- cbind(training_data, model.matrix(~City, data = dataTrainAll)[, -1])
# Implicit category for AdX is 1
training_data <- cbind(training_data, model.matrix(~AdX, data = dataTrainAll)[, -1])
# Implicit category for Domain is 5Fa-expoBTTR1m58uG
training_data <- cbind(training_data, model.matrix(~Domain, data = dataTrainAll)[, -1])
# Implicit category for Key_page is 3a7eb50444df6f61b2409f4e2f16b687
training_data <- cbind(training_data, model.matrix(~Key_Page, data = dataTrainAll)[, -1])
# Implicit category for Ad_Vis is 0
training_data <- cbind(training_data, model.matrix(~Ad_Vis, data = dataTrainAll)[, -1])
# Implicit category for Ad_Form is 0
training_data <- cbind(training_data, model.matrix(~Ad_Form, data = dataTrainAll)[, -1, drop=FALSE])
# Standardize remaining three columns
training_data <- cbind(training_data, Ad_Width = dataTrainAll$Ad_Width)
training_data <- cbind(training_data, Ad_Height = dataTrainAll$Ad_Height)
training_data <- cbind(training_data, Floor_Price = dataTrainAll$Floor_Price)
training_data$Ad_Width <- (training_data$Ad_Width - mean(training_data$Ad_Width)) / sd(training_data$Ad_Width)
training_data$Ad_Height <- (training_data$Ad_Height - mean(training_data$Ad_Height)) / sd(training_data$Ad_Height)
training_data$Floor_Price <- (training_data$Floor_Price - mean(training_data$Floor_Price)) / sd(training_data$Floor_Price)
# Preprocess Click column
training_data <- cbind(training_data, Click = sapply(dataTrainAll$Click, function(x) {
if (x >= 1) {
return(1)
} else {
return(0)
}
}))
head(training_data)
model <- glmnet(training_data[, 1:dim(training_data)[2] - 1], training_data$Click, family = "binomial", standardize = "false")
head(training_data[, 1:dim(training_data)[2] - 1])
typeof(training_data$Click)
model <- glmnet(training_data[, 1:dim(training_data)[2] - 1], factor(training_data$Click), family = "binomial", standardize = "false")
model <- glmnet(x = training_data[, 1:dim(training_data)[2] - 1], y = training_data$Click, family = "binomial", standardize = "false")
head(matrix(training_data))
head(as.matrix(training_data))
model <- glmnet(as.matrix(training_data[, 1:dim(training_data)[2] - 1]), training_data$Click, family = "binomial", standardize = "false")
model <- glmnet(as.matrix(training_data[, 1:dim(training_data)[2] - 1]), training_data$Click, family = "binomial", standardize = FALSE)
model <- glmnet(training_data[, 1:dim(training_data)[2] - 1], training_data$Click, family = "binomial", standardize = FALSE)
as.matrix(
plot(model)
)
model <- glmnet(as.matrix(training_data[, 1:dim(training_data)[2] - 1]), factor(training_data$Click), family = "binomial", standardize = FALSE)
plot model
plot(model)
model <- glmnet(as.matrix(training_data[, 1:dim(training_data)[2] - 1]), training_data$Click, family = "binomial", standardize = FALSE)
plot(model)
?glmnet
plot(model)
model <- glmnet(as.matrix(training_data[, 1:dim(training_data)[2] - 1]), training_data$Click, family = "binomial", standardize = FALSE)
plot(model)
?glmnet
lasso_model <- glmnet(as.matrix(training_data[, 1:dim(training_data)[2] - 1]), training_data$Click, family = "binomial", alpha = 1, standardize = FALSE)
ridge_model <- glmnet(as.matrix(training_data[, 1:dim(training_data)[2] - 1]), training_data$Click, family = "binomial", alpha = 0, standardize = FALSE)
plot(lasso_model)
plot(ridge_model)
plot(ridge_model)
plot(lasso_model, xvar="lambda")
plot(ridge_model, xvar="lambda")
plot(lasso_model, xvar="lambda")
plot(lasso_model, xvar="lambda")
plot(ridge_model, xvar="lambda")
summary(lasso_model)
coef(lasso_model)
print(lasso_model)
plot(lasso_model, xvar="lambda", label = TRUE)
plot(lasso_model, xvar="lambda", label = TRUE)
head(training_data)
coef(lasso_model, s=0.1)
coef(lasso_model, s=-1)
coef(ridge_model, s=-1)
plot(ridge_model, xvar="lambda")
?cv.glmnet
cv.glmnet(as.matrix(training_data[, 1:dim(training_data)[2] - 1]), training_data$Click, nfolds = 5)
cv_lasso <- cv.glmnet(as.matrix(training_data[, 1:dim(training_data)[2] - 1]), training_data$Click, nfolds = 5, alpha = 1)
cv_ridge <- cv.glmnet(as.matrix(training_data[, 1:dim(training_data)[2] - 1]), training_data$Click, nfolds = 5, alpha = 0)
coef(cv_lasso, s = -1)
small.lambda.index <- which(cv_lasso$lambda == cv_lasso$lambda.min)
small.lambda.betas <- cv_lasso$glmnet.fit$beta[, small.lambda.index]
small.lambda.betas
cv_lasso$lambda.1se
log(0.027)
log10(0.027)
cv_lasso$lambda.min
log(0.0018)
cv.lasso.l1
?coef
coef(cv.lasso, s="lambda.min")
coef(cv_lasso, s="lambda.min")
lasso_lambda <- cv_lasso$lambda.min
lasso_l1norm <- sum(abs(coef(cv_lasso, s="lambda.min")))
ridge_lambda <- cv_lasso$lambda.min
ridge_l1norm <- sum(abs(coef(cv_ridge, s="lambda.min")))
?abline
abline(v=lasso_lambda)
plot(lasso_model, xvar="lambda")
abline(v=lasso_lambda)
abline(v=lasso_lambda, col="red", lty=2)
plot(lasso_model, xvar="lambda")
abline(v=lasso_lambda, col="red", lty=2)
lasso_lambda
log(lasso_lambda)
plot(lasso_model, xvar="lambda")
abline(v=log(lasso_lambda), col="red", lty=2)
plot(lasso_model, xvar="lambda")
abline(v=log(lasso_lambda), col="red", lty=2, lwd=3)
?plot
plot(ridge_model, xvar="lambda", main="4.1c) Ridge with L1-norm")
abline(v=log(ridge_lambda), col="red", lty=2, lwd=3)
ridge_lambda
log(ridge_lambda)
ridge_lambda <- cv_ridge$lambda.min
plot(ridge_model, xvar="lambda", main="4.1c) Ridge with L1-norm")
abline(v=log(ridge_lambda), col="red", lty=2, lwd=3)
ridge_lambda
log(ridge_lambda)
lasso_lambda <- cv_lasso$lambda.min
lasso_l1norm <- sum(abs(coef(cv_lasso, s="lambda.min")))
ridge_lambda <- cv_ridge$lambda.min
ridge_l1norm <- sum(abs(coef(cv_ridge, s="lambda.min")))
plot(lasso_model, main="4.1c) Lasso with L1-norm")
abline(v=lasso_l1norm, col="red", lty=2, lwd=3)
plot(ridge_model, main="4.1c) Ridge with L1-norm")
abline(v=lasso_l1norm, col="red", lty=2, lwd=3)
plot(lasso_model, xvar="lambda", main="4.1 a) Lasso")
plot(ridge_model, xvar="lambda", main="4.1 a) Ridge")
plot(cv_ridge)
plot(cv_lasso)
plot(cv_ridge)
plot(cv_lasso)
par(mfrow = c(2, 2))
plot(lasso_model, main="4.1c) Lasso with L1-norm")
abline(v=lasso_l1norm, col="red", lty=2, lwd=3)
plot(cv_lasso)
plot(ridge_model, main="4.1c) Ridge with L1-norm")
abline(v=lasso_l1norm, col="red", lty=2, lwd=3)
plot(cv_ridge)
par(mfrow = c(2, 2))
plot(lasso_model, main="4.1c) Lasso with L1-norm")
abline(v=lasso_l1norm, col="red", lty=2, lwd=3)
plot(cv_lasso, main="Lasso Cross-Validation")
plot(ridge_model, main="4.1c) Ridge with L1-norm")
abline(v=lasso_l1norm, col="red", lty=2, lwd=3)
plot(cv_ridge, main="Ridge Cross-Validation")
ggplot(cv_ridge)
paste("L1 norm for lasso:", lasso_l1norm)
paste("L1 norm for ridge:", ridge_l1norm)
log(0.01)
log(0.001)
log(0.1)
par(mfrow = c(2, 2))
plot(lasso_model, main="4.1c) Lasso with L1-norm")
abline(v=lasso_l1norm, col="red", lty=2, lwd=3)
plot(cv_lasso, main="Lasso Cross-Validation")
paste("L1 norm for lasso:", lasso_l1norm)
plot(ridge_model, main="4.1c) Ridge with L1-norm")
abline(v=lasso_l1norm, col="red", lty=2, lwd=3)
plot(cv_ridge, main="Ridge Cross-Validation")
paste("L1 norm for ridge:", ridge_l1norm)
ls()
head(dataTest)
head(dataTestRes)
features <- c("Region", "City", "AdX", "Domain", "Key_Page", "Ad_Vis", "Ad_Form")
dataTest[, features] <- factor(dataTest[, features])
length(features)
for (i in 1:length(features)) {
dataTest[, features[i]] <- factor(dataTest[, features[i]])
}
for (i in 1:length(features)) {
dataTest[, features[i]] <- factor(dataTest[, features[i]])
}
# Converting to indicator variables
# Implicit category for Region is 1
testing_data <- data.frame(model.matrix(~Region, data = dataTest)[, -1])
# Implicit category for City is 1
testing_data <- cbind(training_data, model.matrix(~City, data = dataTest)[, -1])
# Implicit category for AdX is 1
testing_data <- cbind(training_data, model.matrix(~AdX, data = dataTest)[, -1])
# Implicit category for Domain is 5Fa-expoBTTR1m58uG
testing_data <- cbind(training_data, model.matrix(~Domain, data = dataTest)[, -1])
# Implicit category for Key_page is 3a7eb50444df6f61b2409f4e2f16b687
testing_data <- cbind(training_data, model.matrix(~Key_Page, data = dataTest)[, -1])
# Implicit category for Ad_Vis is 0
testing_data <- cbind(training_data, model.matrix(~Ad_Vis, data = dataTest)[, -1])
# Implicit category for Ad_Form is 0
testing_data <- cbind(training_data, model.matrix(~Ad_Form, data = dataTest)[, -1, drop=FALSE])
# Standardize remaining three columns
testing_data <- cbind(testing_data, Ad_Width = dataTestRes$Ad_Width)
for (i in 1:length(features)) {
dataTest[, features[i]] <- factor(dataTest[, features[i]])
}
# Converting to indicator variables
# Implicit category for Region is 1
testing_data <- data.frame(model.matrix(~Region, data = dataTest)[, -1])
# Implicit category for City is 1
testing_data <- cbind(training_data, model.matrix(~City, data = dataTest)[, -1])
# Implicit category for AdX is 1
testing_data <- cbind(training_data, model.matrix(~AdX, data = dataTest)[, -1])
# Implicit category for Domain is 5Fa-expoBTTR1m58uG
testing_data <- cbind(training_data, model.matrix(~Domain, data = dataTest)[, -1])
# Implicit category for Key_page is 3a7eb50444df6f61b2409f4e2f16b687
testing_data <- cbind(training_data, model.matrix(~Key_Page, data = dataTest)[, -1])
# Implicit category for Ad_Vis is 0
testing_data <- cbind(training_data, model.matrix(~Ad_Vis, data = dataTest)[, -1])
# Implicit category for Ad_Form is 0
testing_data <- cbind(training_data, model.matrix(~Ad_Form, data = dataTest)[, -1, drop=FALSE])
# Standardize remaining three columns
testing_data <- cbind(testing_data, Ad_Width = dataTest$Ad_Width)
testing_data <- cbind(testing_data, Ad_Height = dataTest$Ad_Height)
testing_data <- cbind(testing_data, Floor_Price = dataTest$Floor_Price)
testing_data$Ad_Width <- (testing_data$Ad_Width - mean(testing_data$Ad_Width)) / sd(testing_data$Ad_Width)
testing_data$Ad_Height <- (testing_data$Ad_Height - mean(testing_data$Ad_Height)) / sd(testing_data$Ad_Height)
testing_data$Floor_Price <- (testing_data$Floor_Price - mean(testing_data$Floor_Price)) / sd(testing_data$Floor_Price)
# Preprocess Click column
testing_data <- cbind(testing_data, Click = sapply(dataTestRes$Click, function(x) {
if (x >= 1) {
return(1)
} else {
return(0)
}
}))
head(testing_data)
head(dataTest)
head(model.matrix(~Region, data = dataTest))
for (i in 1:length(features)) {
dataTest[, features[i]] <- factor(dataTest[, features[i]])
}
# Converting to indicator variables
# Implicit category for Region is 1
testing_data <- data.frame(model.matrix(~Region, data = dataTest)[, -1])
# Implicit category for City is 1
testing_data <- cbind(testing_data, model.matrix(~City, data = dataTest)[, -1])
# Implicit category for AdX is 1
testing_data <- cbind(testing_data, model.matrix(~AdX, data = dataTest)[, -1])
# Implicit category for Domain is 5Fa-expoBTTR1m58uG
testing_data <- cbind(testing_data, model.matrix(~Domain, data = dataTest)[, -1])
# Implicit category for Key_page is 3a7eb50444df6f61b2409f4e2f16b687
testing_data <- cbind(testing_data, model.matrix(~Key_Page, data = dataTest)[, -1])
# Implicit category for Ad_Vis is 0
testing_data <- cbind(testing_data, model.matrix(~Ad_Vis, data = dataTest)[, -1])
# Implicit category for Ad_Form is 0
testing_data <- cbind(testing_data, model.matrix(~Ad_Form, data = dataTest)[, -1, drop=FALSE])
# Standardize remaining three columns
testing_data <- cbind(testing_data, Ad_Width = dataTest$Ad_Width)
testing_data <- cbind(testing_data, Ad_Height = dataTest$Ad_Height)
testing_data <- cbind(testing_data, Floor_Price = dataTest$Floor_Price)
testing_data$Ad_Width <- (testing_data$Ad_Width - mean(testing_data$Ad_Width)) / sd(testing_data$Ad_Width)
testing_data$Ad_Height <- (testing_data$Ad_Height - mean(testing_data$Ad_Height)) / sd(testing_data$Ad_Height)
testing_data$Floor_Price <- (testing_data$Floor_Price - mean(testing_data$Floor_Price)) / sd(testing_data$Floor_Price)
# Preprocess Click column
testing_data <- cbind(testing_data, Click = sapply(dataTestRes$Click, function(x) {
if (x >= 1) {
return(1)
} else {
return(0)
}
}))
head(testing_data)
head(dataTest)
?predict
lasso_predictions <- predict(cv_lasso, testing_data, type="class", s=lasso_lambda)
lasso_predictions <- predict(cv_lasso, xnew = testing_data, type="class", s=lasso_lambda)
lasso_predictions <- predict(cv_lasso, newx = testing_data, type="class", s=lasso_lambda)
head(testing_data)
lasso_predictions <- predict(cv_lasso, testing_data, type="class", s=lasso_lambda)
lasso_predictions <- predict(cv_lasso, testing_data, type="response", s=lasso_lambda)
length(intersect(names(testing_data), names(training_data)))
length(names(testing_data))
lasso_predictions <- predict(cv_lasso, as.matrix(testing_data), type="class", s=lasso_lambda)
lasso_predictions <- predict(cv_lasso, testing_data, type="class", s="lambda.min")
lasso_predictions <- predict(cv_lasso, matrix(testing_data), type="class", s="lambda.min")
?read.csv
lasso_predictions <- predict(cv_lasso, testing_data, type="class", s=lasso_lambda)
typeof(testing_data)
lasso_predictions <- predict(cv_lasso, training_data, type="class", s=lasso_lambda)
load("iPinYou.RData") # loads dataTest, dataTestRes and dataTrainAll objects
testing_data <- data.frame(model.matrix(~Region, data = dataTest)[, -1])
head(testing_data)
for (i in 1:length(features)) {
dataTest[, features[i]] <- factor(dataTest[, features[i]])
}
testing_data <- data.frame(model.matrix(~Region, data = dataTest)[, -1])
head(testing_data)
typeof(testing_data$Region3)
typeof(testing_data)
typeof(data.frame(testing_data))
typeof(as.data.frame(testing_data))
typeof(data.frame(cbind(testing_data)))
typeof(data.frame(unlist(testing_data)))
data.frame(c(1,2,3),c(2,3,4))
typeof(data.frame(c(1,2,3),c(2,3,4)))
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60), tidy=TRUE, warning=FALSE, message = FALSE, fig.path='Plots/', echo = TRUE, cache = TRUE)
library(ggplot2)
library(knitr)
housingprices <- read.csv("housingprice.csv", header = TRUE)
typeof(housingprices)
for (i in 1:length(features)) {
dataTest[, features[i]] <- factor(dataTest[, features[i]])
}
# Converting to indicator variables
# Implicit category for Region is 1
testing_data <- data.frame(model.matrix(~Region, data = dataTest)[, -1])
# Implicit category for City is 1
testing_data <- cbind(testing_data, model.matrix(~City, data = dataTest)[, -1])
# Implicit category for AdX is 1
testing_data <- cbind(testing_data, model.matrix(~AdX, data = dataTest)[, -1])
# Implicit category for Domain is 5Fa-expoBTTR1m58uG
testing_data <- cbind(testing_data, model.matrix(~Domain, data = dataTest)[, -1])
# Implicit category for Key_page is 3a7eb50444df6f61b2409f4e2f16b687
testing_data <- cbind(testing_data, model.matrix(~Key_Page, data = dataTest)[, -1])
# Implicit category for Ad_Vis is 0
testing_data <- cbind(testing_data, model.matrix(~Ad_Vis, data = dataTest)[, -1])
# Implicit category for Ad_Form is 0
testing_data <- cbind(testing_data, model.matrix(~Ad_Form, data = dataTest)[, -1, drop=FALSE])
# Standardize remaining three columns
testing_data <- cbind(testing_data, Ad_Width = dataTest$Ad_Width)
testing_data <- cbind(testing_data, Ad_Height = dataTest$Ad_Height)
testing_data <- cbind(testing_data, Floor_Price = dataTest$Floor_Price)
testing_data$Ad_Width <- (testing_data$Ad_Width - mean(testing_data$Ad_Width)) / sd(testing_data$Ad_Width)
testing_data$Ad_Height <- (testing_data$Ad_Height - mean(testing_data$Ad_Height)) / sd(testing_data$Ad_Height)
testing_data$Floor_Price <- (testing_data$Floor_Price - mean(testing_data$Floor_Price)) / sd(testing_data$Floor_Price)
# Preprocess Click column
testing_data <- cbind(testing_data, Click = sapply(dataTestRes$Click, function(x) {
if (x >= 1) {
return(1)
} else {
return(0)
}
}))
typeof(testing_data).
typeof(testing_data.)
typeof(testing_data)
testing_data <- data.frame(model.matrix(~.-Region, data = dataTest)[, -1])
head(testing_data)
typeof(testing_data$Region3)
typeof(testing_data$City2)
typeof(testing_data$AdX2)
typeof(testing_data$Domain5KFUl5p0Gxsvgmd4wspENpn)
typeof(testing_data$Key_Page9f4e2f16b6873a7eb504df6f61b24044)
typeof(testing_data$Ad_Vis1)
typeof(testing_data$Ad_Form1)
typeof(testing_data$Click)
cv_lasso
summary(cv_lasso)
coef(cv_lambda)
coef(cv_lasso)
coef(cv_lasso, s=lasso_lambda)
coef(cv_lasso, s="lambda.min")
coef(cv_lasso, s=ridge_lambda)
coef(cv_ridge, s=ridge_lambda)
lasso_predictions <- predict(cv_lasso, testing_data, type="response", s=lasso_lambda)
cv_lasso <- cv.glmnet(as.matrix(training_data[, 1:dim(training_data)[2] - 1]), training_data$Click, nfolds = 5, alpha = 1)
lasso_predictions <- predict(cv_lasso, testing_data, type="class", s=lasso_lambda)
lasso_predictions <- predict(cv_lasso, newx=testing_data, type="class", s=lasso_lambda)
dim(training_data)
dim(testing_data)
head(matrix(testing_data))
head(as.matrix(testing_data))
lasso_predictions <- predict(cv_lasso, as.matrix(testing_data), type="class", s=lasso_lambda)
dim(as.matrix(testing_data))
coef(cv_lasso, s=lasso_lambda)
whic(coef(cv_lasso, s=lasso_lambda) > 0)
which(coef(cv_lasso, s=lasso_lambda) > 0)
which(coef(cv_lasso, s=lasso_lambda) > 0)[-1]
testing.x <- as.matrix(testing_data[, which(coef(cv_lasso, s=lasso_lambda) > 0)[-1]])
head(testing.x)
coef(cv_lasso, s=lasso_lambda)[1]
names(coef(cv_lasso, s=lasso_lambda))
names(names(testing_data))
names(testing_data)
relevant_features <- names(testing_data)[which(coef(cv_lasso, s=lasso_lambda) > 0)[-1]-1]
relevant_features
testing.x <- as.matrix(testing_data[, which(abs(coef(cv_lasso, s=lasso_lambda)) > 0)[-1]])
relevant_features
relevant_features <- names(testing_data)[which(coef(cv_lasso, s=lasso_lambda) > 0)[-1]-1]
relevant_features
relevant_features <- names(testing_data)[which(abs(coef(cv_lasso, s=lasso_lambda)) > 0)[-1]-1]
relevant_features
testing.x <- as.matrix(testing_data[, relevant_features])
head(testing.x)
lasso_predictions <- predict(cv_lasso, testing.x, type="class", s=lasso_lambda)
relevant_features <- names(testing_data)[which(abs(coef(cv_lasso, s=lasso_lambda)) > 0)[-1]-1]
testing.x <- as.matrix(testing_data[, relevant_features])
lasso_predictions <- predict(cv_lasso, testing.x, type="class", s=lasso_lambda)
dim(testing.x)
lasso_predictions <- predict(cv_lasso, dataTest, type="class", s=lasso_lambda)
lasso_predictions <- predict(cv_lasso, as.matrix(testing_data), type="class", s=lasso_lambda)
dim(testing.x)
for (i in 1:dim(testing.x)[2]) {
testing.x[,i] <- factor(testing.x[,i])
}
lasso_predictions <- predict(cv_lasso, testing.x, type="class", s=lasso_lambda)
head(testing.x)
typeof(testing.x[,2])
testing.x <- as.matrix(testing_data[, relevant_features])
for (i in 1:dim(testing.x)[2]) {
testing.x[,i] <- factor(testing.x[,i])
}
typeof(testing.x[,2])
typeof(factor(testing.x[, 3]))
head(testing.x[,3])
factor(testing.x[, 3])
lasso_predictions <- predict(lasso_model, testing_data, type="class", s=lasso_lambda)
head((model.matrix(~Region+City, data = dataTrainAll))
)
load("iPinYou.RData") # loads dataTest, dataTestRes and dataTrainAll objects
features <- c("Region", "City", "AdX", "Domain", "Key_Page", "Ad_Vis", "Ad_Form")
for (i in 1:length(features)) {
dataTrainAll[, features[i]] <- factor(dataTrainAll[, features[i]])
}
head((model.matrix(~Region+City, data = dataTrainAll))
)
head((model.matrix(~(features), data = dataTrainAll))
)
fake <- lm(City ~ Region + Ad_Width, training_data)
fake <- lm(City2 ~ Region2 + Ad_Width, training_data)
head(training_data)
fake <- lm(Click ~ Region3 + Region6 + Ad_Width, training_data)
predict(fake, testing_data)
rm(fake)
ridge_predictions <- predict(cv_ridge, testing_data, type="class", s=ridge_lambda)
head(testing_data)
for (i in 1:dim(testing_data)[2]) {
testing_data[, i] <- as.factor(testing_data[, i])
}
