else return(0)), y = intervals[, 2])
confidence = sum(freq)/d
confidence
n = 100
# create a matrix of X_i's. Each X_i = 1/(1 - u), where u is uniform on (0, 1)
xs = matrix(data = 1, nrow = d, ncol =n)
xs = apply(xs, c(1, 2), (function(x) 1 / (1 - runif(x))))
# calculate MLE for each dataset
logsum = apply(apply(xs, c(1, 2), log), 1, sum)
mle = sapply(logsum, (function(x) 1 + (n/x)))
# lower and upper bounds for 95% confidence intervals
lower = sapply(mle, (function(x) 2 - 1.96*(x - 1)/sqrt(n)))
upper = sapply(mle, (function(x) 2 + 1.96*(x - 1)/sqrt(n)))
intervals = cbind(lower, upper)
freq = apply(intervals, 1, (function(x, y) if (x <= 2 && y >= 2) return(1)
else return(0)), y = intervals[, 2])
confidence = sum(freq)/d
confidence
matrix(data = 1, nrow = d, ncol =n)
runif(1)
runif(1)
apply(xs, c(1, 2), (function(x) 1 / (1 - runif(x))))
xs = matrix(data = 1, nrow = d, ncol =n)
xs = apply(xs, c(1, 2), (function(x) 1 / (1 - runif(x))))
xs
lower
dim(lower)
typeof(lower)
length(lower)
length(cbind(lower, upper))
typeof(cbind(lower, upper))
head(freq)
intervals[,2]
dim(intervals)
freq = rep(0, 10000)
for (i in 1:length(lower)) {
if (lower[i] <= 2 & upper[i] >= 2)
freq[i] = 1
}
mean(freq)
freq = rep(0, 10000)
for (i in 1:length(lower)) {
if (lower[i] <= 2 & upper[i] >= 2) {
freq[i] = 1
}
}
mean(freq)
freq = rep(0, 10000)
for (i in 1:length(lower)) {
if (lower[i] <= 2 & 2 <= upper[i]) {
freq[i] = 1
}
}
mean(freq)
head(lower)
head(upper)
length(which(lower > 2))
freq = apply(intervals, 1, (function(x, y) if (x <= 2 && y >= 2) return(1)
else return(0)), y = intervals[, 2])
confidence = sum(freq)/d
confidence
lower = sapply(mle, (function(x) x - 1.96*(x - 1)/sqrt(n)))
upper = sapply(mle, (function(x) x + 1.96*(x - 1)/sqrt(n)))
intervals = cbind(lower, upper)
freq = apply(intervals, 1, (function(x, y) if (x <= 2 && y >= 2) return(1)
else return(0)), y = intervals[, 2])
confidence = sum(freq)/d
confidence
length(lower)
which(lower > 2)
freq = rep(0, 10000)
for (i in 1:length(lower)) {
if (lower[i] <= 2 & 2 <= upper[i]) {
freq[i] = 1
}
}
mean(freq)
lower = sapply(mle, (function(x) x - 1.96*(x - 1)/sqrt(n)))
upper = sapply(mle, (function(x) x + 1.96*(x - 1)/sqrt(n)))
intervals = cbind(lower, upper)
return (0 < 1 & 1 < 2)
sapply(1:5, function(x){return (0 < i & i < 2)})
sapply(1:5, function(x){return (0 < x & x < 2)})
sapply(1:5, function(x){return (0 < x & x < 2)}) + 1
freq <- sapply(1:length(lower), function(x) {
if (lower[i] <= 2 & 2 <= upper[i]) {
return 1
lower = sapply(mle, (function(x) x - 1.96*(x - 1)/sqrt(n)))
upper = sapply(mle, (function(x) x + 1.96*(x - 1)/sqrt(n)))
intervals = cbind(lower, upper)
freq <- sapply(1:length(lower), function(x) {
if (lower[i] <= 2 & 2 <= upper[i]) {
return(1)
} else {
return(0)
}
})
mean(freq)
lower = sapply(mle, (function(x) x - 1.96*(x - 1)/sqrt(n)))
upper = sapply(mle, (function(x) x + 1.96*(x - 1)/sqrt(n)))
intervals = cbind(lower, upper)
freq <- sapply(1:length(lower), function(x) {
if (lower[i] <= 2 & 2 <= upper[i]) {
return(1)
} else {
return(0)
}
})
mean(freq)
freq
lower = sapply(mle, (function(x) x - 1.96*(x - 1)/sqrt(n)))
upper = sapply(mle, (function(x) x + 1.96*(x - 1)/sqrt(n)))
which(lower <= 2)
freq <- sapply(1:length(lower), function(x) {
if (lower[i] <= 2 & 2 <= upper[i]) {
return(1)
} else {
return(0)
}
})
mean(freq)
freq = apply(intervals, 1, (function(x, y) if (x <= 2 & y >= 2) return(1)
else return(0)), y = intervals[, 2])
confidence = sum(freq)/d
confidence
which(lower <= 2)
which(upper > 2)
freq <- sapply(1:length(lower), function(x) {
if (lower[i] <= 2 & 2 <= upper[i]) {
1
} else {
0
}
})
mean(freq)
which(freq != 1)
head(lower)
head(upper)
mean(sapply(1:length(lower), function(i) {
if (lower[i] <= 2 & 2 <= upper[i]) {
1
} else {
0
}
}))
mean(sapply(1:length(lower), function(i) {
if (lower[i] <= 2 & 2 <= upper[i]) {
return(1)
} else {
return(0)
}
}))
n <- 100
theta <- 2
cdfi <- function(x) {return(1 / (1-x)^(theta - 1))}
effective_arr <- rep(0, 10000)
for (i in 1:10000) {
dataset <- sapply(runif(100, 0, 1), cdfi)
# Construct 95% confidence interval
z <- 1.96
log_sums <- sum(sapply(dataset, log))
theta_hat_n <- 1 + n / log_sums
CI_lower <- theta_hat_n - z * sqrt(n)/log_sums
CI_upper <- theta_hat_n + z * sqrt(n)/log_sums
if (CI_lower <= theta & theta <= CI_upper) {
effective_arr[i] <- 1
}
}
mean(effective_arr)
freq = apply(intervals, 1, function(x) {
if (x[1] <= 2 && x[2] >= 2)
return(1)
else return(0)
})
confidence = sum(freq)/d
confidence
freq = apply(intervals, 1, function(x) if (x[1] <= 2 && x[2] >= 2) return(1)
else return(0))
confidence = sum(freq)/d
confidence
theta <- 2
cdfi <- function(x) {return(1 / (1-x)^(theta - 1))}
effective_arr <- rep(0, 10000)
for (i in 1:10000) {
dataset <- sapply(runif(100, 0, 1), cdfi)
# Construct 95% confidence interval
z <- 1.96
log_sums <- sum(sapply(dataset, log))
theta_hat_n <- 1 + n / log_sums
CI_lower <- theta_hat_n - z * sqrt(n)/log_sums
CI_upper <- theta_hat_n + z * sqrt(n)/log_sums
if (CI_lower <= theta & theta <= CI_upper) {
effective_arr[i] <- 1
}
}
mean(effective_arr)
n <- 100
theta <- 2
cdfi <- function(x) {return(1 / (1-x)^(theta - 1))}
effective_arr <- rep(0, 10000)
for (i in 1:10000) {
dataset <- sapply(runif(100, 0, 1), cdfi)
# Construct 95% confidence interval
z <- 1.96
log_sums <- sum(sapply(dataset, log))
theta_hat_n <- 1 + n / log_sums
CI_lower <- theta_hat_n - z / sqrt(n) * (theta_hat_n - 1)
CI_upper <- theta_hat_n + z / sqrt(n) * (theta_hat_n - 1)
#CI_lower <- theta_hat_n - z * sqrt(n)/log_sums
#CI_upper <- theta_hat_n + z * sqrt(n)/log_sums
if (CI_lower <= theta & theta <= CI_upper) {
effective_arr[i] <- 1
}
}
mean(effective_arr)
n <- 100
theta <- 2
cdfi <- function(x) {return(1 / (1-x)^(theta - 1))}
effective_arr <- rep(0, 10000)
for (i in 1:10000) {
dataset <- sapply(runif(100, 0, 1), cdfi)
# Construct 95% confidence interval
z <- 1.96
log_sums <- sum(sapply(dataset, log))
theta_hat_n <- 1 + n / log_sums
CI_lower <- theta_hat_n - z / sqrt(n) * (theta_hat_n - 1)
CI_upper <- theta_hat_n + z / sqrt(n) * (theta_hat_n - 1)
#CI_lower <- theta_hat_n - z * sqrt(n)/log_sums
#CI_upper <- theta_hat_n + z * sqrt(n)/log_sums
if (CI_lower <= theta & theta <= CI_upper) {
effective_arr[i] <- 1
}
}
mean(effective_arr)
n <- 100
theta <- 2
cdfi <- function(x) {return(1 / (1-x)^(theta - 1))}
effective_arr <- rep(0, 10000)
for (i in 1:10000) {
dataset <- sapply(runif(100, 0, 1), cdfi)
# Construct 95% confidence interval
z <- 1.96
log_sums <- sum(sapply(dataset, log))
theta_hat_n <- 1 + n / log_sums
CI_lower <- theta_hat_n - z / sqrt(n) * (theta_hat_n - 1)
CI_upper <- theta_hat_n + z / sqrt(n) * (theta_hat_n - 1)
#CI_lower <- theta_hat_n - z * sqrt(n)/log_sums
#CI_upper <- theta_hat_n + z * sqrt(n)/log_sums
if (CI_lower <= theta & theta <= CI_upper) {
effective_arr[i] <- 1
}
}
mean(effective_arr)
n <- 100
theta <- 2
cdfi <- function(x) {return(1 / (1-x)^(theta - 1))}
effective_arr <- rep(0, 10000)
for (i in 1:10000) {
dataset <- sapply(runif(100, 0, 1), cdfi)
# Construct 95% confidence interval
z <- 1.96
log_sums <- sum(sapply(dataset, log))
theta_hat_n <- 1 + n / log_sums
CI_lower <- theta_hat_n - z / sqrt(n) * (theta_hat_n - 1)
CI_upper <- theta_hat_n + z / sqrt(n) * (theta_hat_n - 1)
#CI_lower <- theta_hat_n - z * sqrt(n)/log_sums
#CI_upper <- theta_hat_n + z * sqrt(n)/log_sums
if (CI_lower <= theta & theta <= CI_upper) {
effective_arr[i] <- 1
}
}
mean(effective_arr)
n <- 100
theta <- 2
cdfi <- function(x) {return(1 / (1-x)^(theta - 1))}
effective_arr <- rep(0, 10000)
for (i in 1:10000) {
dataset <- sapply(runif(100, 0, 1), cdfi)
# Construct 95% confidence interval
z <- 1.96
log_sums <- sum(sapply(dataset, log))
theta_hat_n <- 1 + n / log_sums
CI_lower <- theta_hat_n - z / sqrt(n) * (theta_hat_n - 1)
CI_upper <- theta_hat_n + z / sqrt(n) * (theta_hat_n - 1)
#CI_lower <- theta_hat_n - z * sqrt(n)/log_sums
#CI_upper <- theta_hat_n + z * sqrt(n)/log_sums
if (CI_lower <= theta & theta <= CI_upper) {
effective_arr[i] <- 1
}
}
mean(effective_arr)
n <- 100
theta <- 2
cdfi <- function(x) {return(1 / (1-x)^(theta - 1))}
effective_arr <- rep(0, 10000)
for (i in 1:10000) {
dataset <- sapply(runif(100, 0, 1), cdfi)
# Construct 95% confidence interval
z <- 1.96
log_sums <- sum(sapply(dataset, log))
theta_hat_n <- 1 + n / log_sums
#CI_lower <- theta_hat_n - z / sqrt(n) * (theta_hat_n - 1)
#CI_upper <- theta_hat_n + z / sqrt(n) * (theta_hat_n - 1)
CI_lower <- theta_hat_n - z * sqrt(n)/log_sums
CI_upper <- theta_hat_n + z * sqrt(n)/log_sums
if (CI_lower <= theta & theta <= CI_upper) {
effective_arr[i] <- 1
}
}
mean(effective_arr)
n <- 100
theta <- 2
cdfi <- function(x) {return(1 / (1-x)^(theta - 1))}
effective_arr <- rep(0, 10000)
for (i in 1:10000) {
dataset <- sapply(runif(100, 0, 1), cdfi)
# Construct 95% confidence interval
z <- 1.96
log_sums <- sum(sapply(dataset, log))
theta_hat_n <- 1 + n / log_sums
#CI_lower <- theta_hat_n - z / sqrt(n) * (theta_hat_n - 1)
#CI_upper <- theta_hat_n + z / sqrt(n) * (theta_hat_n - 1)
CI_lower <- theta_hat_n - z * sqrt(n)/log_sums
CI_upper <- theta_hat_n + z * sqrt(n)/log_sums
if (CI_lower <= theta & theta <= CI_upper) {
effective_arr[i] <- 1
}
}
mean(effective_arr)
training_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + factor(zipcode) + bedrooms * bathrooms, data = training_data)
paste("Training data R^2:", summary(training_model)$r.squared)
testing_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + factor(zipcode) + bedrooms * bathrooms, data = testing_data)
paste("Testing data R^2:", summary(testing_model)$r.squared)
# 5b)
training_poly_model <- lm(price ~ poly(bedrooms, 3) + poly(bathrooms, 3) + sqft_living + sqft_lot + factor(zipcode), data = training_data)
paste("Training data R^2:", summary(training_poly_model)$r.squared)
testing_poly_model <- lm(price ~ poly(bedrooms, 3) + poly(bathrooms, 3) + sqft_living + sqft_lot + factor(zipcode), data = testing_data)
paste("Testing data R^2:", summary(testing_poly_model)$r.squared)
training_data <- read.csv("train.data.csv", header = TRUE)
testing_data <- read.csv("test.data.csv", header = TRUE)
# 4a)
training_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot, data = training_data)
paste("Training data R^2:", summary(training_model)$r.squared)
testing_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot, data = testing_data)
paste("Testing data R^2:", summary(testing_model)$r.squared)
# 4b)
training_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + factor(zipcode), data = training_data)
paste("Training data R^2:", summary(training_model)$r.squared)
testing_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + factor(zipcode), data = testing_data)
paste("Testing data R^2:", summary(testing_model)$r.squared)
# 4c)
billgates_house <- read.csv("fancyhouse.csv", header = TRUE)
billgates_house$zipcode <- factor(billgates_house$zipcode)
paste("Predicted price of Bill Gate's House:", predict(training_model, billgates_house))
training_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + factor(zipcode) + bedrooms * bathrooms, data = training_data)
paste("Training data R^2:", summary(training_model)$r.squared)
testing_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + factor(zipcode) + bedrooms * bathrooms, data = testing_data)
paste("Testing data R^2:", summary(testing_model)$r.squared)
# 5b)
training_poly_model <- lm(price ~ poly(bedrooms, 3) + poly(bathrooms, 3) + sqft_living + sqft_lot + factor(zipcode), data = training_data)
paste("Training data R^2:", summary(training_poly_model)$r.squared)
testing_poly_model <- lm(price ~ poly(bedrooms, 3) + poly(bathrooms, 3) + sqft_living + sqft_lot + factor(zipcode), data = testing_data)
paste("Testing data R^2:", summary(testing_poly_model)$r.squared)
testing_poly_model <- lm(price ~ poly(bedrooms, 3) + poly(bathrooms, 3) + sqft_living + sqft_lot + zipcode, data = testing_data)
paste("Testing data R^2:", summary(testing_poly_model)$r.squared)
```{r Q4_chunk_1}
training_data <- read.csv("train.data.csv", header = TRUE)
training_data$zipcode <- factor(training_data$zipcode)
testing_poly_model <- lm(price ~ poly(bedrooms, 3) + poly(bathrooms, 3) + sqft_living + sqft_lot + factor(zipcode), data = testing_data)
paste("Testing data R^2:", summary(testing_poly_model)$r.squared)
training_poly_model <- lm(price ~ poly(bedrooms, 3) + poly(bathrooms, 3) + sqft_living + sqft_lot + factor(zipcode), data = training_data)
paste("Training data R^2:", summary(training_poly_model)$r.squared)
testing_poly_model <- lm(price ~ poly(bedrooms, 3) + poly(bathrooms, 3) + sqft_living + sqft_lot + factor(zipcode), data = testing_data)
paste("Testing data R^2:", summary(testing_poly_model)$r.squared)
training_data <- read.csv("train.data.csv", header = TRUE)
training_data$zipcode <- factor(training_data$zipcode)
testing_data <- read.csv("test.data.csv", header = TRUE)
testing_data$zipcode <- factor(testing_data$zipcode)
training_poly_model <- lm(price ~ poly(bedrooms, 3) + poly(bathrooms, 3) + sqft_living + sqft_lot + factor(zipcode), data = training_data)
paste("Training data R^2:", summary(training_poly_model)$r.squared)
testing_poly_model <- lm(price ~ poly(bedrooms, 3) + poly(bathrooms, 3) + sqft_living + sqft_lot + factor(zipcode), data = testing_data)
paste("Testing data R^2:", summary(testing_poly_model)$r.squared)
training_data <- read.csv("train.data.csv", header = TRUE)
testing_data <- read.csv("test.data.csv", header = TRUE)
# 4a)
training_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot, data = training_data)
paste("Training data R^2:", summary(training_model)$r.squared)
testing_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot, data = testing_data)
paste("Testing data R^2:", summary(testing_model)$r.squared)
# 4b)
training_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + factor(zipcode), data = training_data)
paste("Training data R^2:", summary(training_model)$r.squared)
testing_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + factor(zipcode), data = testing_data)
paste("Testing data R^2:", summary(testing_model)$r.squared)
# 4c)
billgates_house <- read.csv("fancyhouse.csv", header = TRUE)
billgates_house$zipcode <- factor(billgates_house$zipcode)
paste("Predicted price of Bill Gate's House:", predict(training_model, billgates_house))
housingprices <- read.csv("housingprice.csv", header = TRUE)
# 3a)
#prices_zipcode <- aggregate(housingprices[, c("zipcode", "price")], by = list(housingprices$zipcode), FUN = mean)
#prices_zipcode <- prices_zipcode[, c("zipcode", "price")]
#prices_zipcode <- prices_zipcode[order(prices_zipcode$price, decreasing = TRUE), ]
prices_zipcode <- tapply(housingprices$price, factor(housingprices$zipcode), mean)
prices_zipcode <- sort(prices_zipcode, decreasing = TRUE)
max_three <- names(prices_zipcode)[1:3]
df <- data.frame(housingprices[c(which(housingprices$zipcode == max_three[1]), which(housingprices$zipcode == max_three[2]), which(housingprices$zipcode == max_three[3])), c("zipcode", "price")])
df$zipcode <- factor(df$zipcode)
ggplot(df, aes(x = zipcode, y = price)) + geom_boxplot()
head(df)
head(prices_zipcode)
paste("Testing data R^2:", testing_r2(training_model, testing_data))
testing_r2 <- function(model, data) {
predictions <- predict(model, data)
RSS <- sum((data$price - predictions)^2)
TSS <- sum((data$price - mean(predictions))^2)
return(1 - RSS/TSS)
}
paste("Testing data R^2:", testing_r2(training_model, testing_data))
training_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot, data = training_data)
paste("Training data R^2:", summary(training_model)$r.squared)
paste("Testing data R^2:", testing_r2(training_model, testing_data))
# 4b)
training_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + factor(zipcode), data = training_data)
paste("Training data R^2:", summary(training_model)$r.squared)
paste("Testing data R^2:", testing_r2(training_model, testing_data))
billgates_house <- read.csv("fancyhouse.csv", header = TRUE)
billgates_house$zipcode <- factor(billgates_house$zipcode)
paste("Predicted price of Bill Gate's House:", predict(training_model, billgates_house))
# 5a)
training_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + factor(zipcode) + bedrooms * bathrooms, data = training_data)
paste("Training data R^2:", summary(training_model)$r.squared)
paste("Testing data R^2:", testing_r2(training_model, testing_data))
# 5b)
training_poly_model <- lm(price ~ poly(bedrooms, 3) + poly(bathrooms, 3) + sqft_living + sqft_lot + factor(zipcode), data = training_data)
paste("Training data R^2:", summary(training_poly_model)$r.squared)
paste("Testing data R^2:", testing_r2(training_model, testing_data))
training_poly_model <- lm(price ~ poly(bedrooms, 3) + poly(bathrooms, 3) + sqft_living + sqft_lot + factor(zipcode), data = training_data)
paste("Training data R^2:", summary(training_poly_model)$r.squared)
paste("Testing data R^2:", testing_r2(training_poly_model, testing_data))
training_data <- read.csv("train.data.csv", header = TRUE)
testing_data <- read.csv("test.data.csv", header = TRUE)
testing_r2 <- function(model, data) {
predictions <- predict(model, data)
RSS <- sum((data$price - predictions)^2)
TSS <- sum((data$price - mean(predictions))^2)
return(1 - RSS/TSS)
}
# 4a)
training_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot, data = training_data)
paste("Training data R^2:", summary(training_model)$r.squared)
paste("Testing data R^2:", testing_r2(training_model, testing_data))
coef(training_model)
training_data <- read.csv("train.data.csv", header = TRUE)
testing_data <- read.csv("test.data.csv", header = TRUE)
testing_r2 <- function(model, data) {
predictions <- predict(model, data)
RSS <- sum((data$price - predictions)^2)
TSS <- sum((data$price - mean(data$price))^2)
return(1 - RSS/TSS)
}
# 4a)
training_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot, data = training_data)
coef(training_model)
paste("Training data R^2:", summary(training_model)$r.squared)
paste("Testing data R^2:", testing_r2(training_model, testing_data))
training_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + factor(zipcode), data = training_data)
coef(training_model)
paste("Training data R^2:", summary(training_model)$r.squared)
paste("Testing data R^2:", testing_r2(training_model, testing_data))
# 4b)
training_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + factor(zipcode), data = training_data)
coef(training_model)
paste("Training data R^2:", summary(training_model)$r.squared)
paste("Testing data R^2:", testing_r2(training_model, testing_data))
billgates_house <- read.csv("fancyhouse.csv", header = TRUE)
billgates_house$zipcode <- factor(billgates_house$zipcode)
paste("Predicted price of Bill Gate's House:", predict(training_model, billgates_house))
training_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + factor(zipcode) + bedrooms * bathrooms, data = training_data)
coef(training_model)
paste("Training data R^2:", summary(training_model)$r.squared)
paste("Testing data R^2:", testing_r2(training_model, testing_data))
# 5b)
training_poly_model <- lm(price ~ poly(bedrooms, 3) + poly(bathrooms, 3) + sqft_living + sqft_lot + factor(zipcode), data = training_data)
coef(training_poly_model)
paste("Training data R^2:", summary(training_poly_model)$r.squared)
paste("Testing data R^2:", testing_r2(training_poly_model, testing_data))
training_data[which(training_data$price == max(training_data$price)), ]
billgates_house
training_data <- read.csv("train.data.csv", header = TRUE)
testing_data <- read.csv("test.data.csv", header = TRUE)
testing_r2 <- function(model, data) {
predictions <- predict(model, data)
RSS <- sum((data$price - predictions)^2)
TSS <- sum((data$price - mean(data$price))^2)
return(1 - RSS/TSS)
}
# 4a)
training_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot, data = training_data)
coef(training_model)
paste("Training data R^2:", summary(training_model)$r.squared)
paste("Testing data R^2:", testing_r2(training_model, testing_data))
# 4b)
training_model <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + factor(zipcode), data = training_data)
coef(training_model)
paste("Training data R^2:", summary(training_model)$r.squared)
paste("Testing data R^2:", testing_r2(training_model, testing_data))
# 4c)
billgates_house <- read.csv("fancyhouse.csv", header = TRUE)
billgates_house$zipcode <- factor(billgates_house$zipcode)
paste("Predicted price of Bill Gate's House:", predict(training_model, billgates_house))
coef(training_model)
